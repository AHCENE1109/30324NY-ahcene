***ANSWER ALL QUESTIONS BELOW***

1-What is a programming language?
Answer:
  A programming language is a computer language programmers use
to develop software programs, scripts, or other sets of instructions for computers to execute.

2-What is a JDK composed of? Define each components?
Answer:
  The Java Development Kit (JDK) is a software development environment
used for developing Java applications and applets.
It includes the Java Runtime Environment (JRE), an interpreter/loader (java), a compiler (javac), an archiver (jar),
 a documentation generator (javadoc) and other tools needed in Java development.

3-What is an IDE?
Answer:
  A Java IDE (for Integrated Development Environment) is a software application which
enables users to more easily write and debug Java programs.


4-What are some of the most popular Java IDEs available in the market?
Answer:
   Eclipse. Eclipse is a Java IDE that is one of the 3 biggest and most popular IDE's in the world. ...
        BlueJ. BlueJ is a Java IDE that is widely used by Java programmers in the world. ...
        IntelliJ IDEA. ...
        jGRASP. ...
        JCreator. ...
        NetBeans. ...
        Greenfoot. ...
        JDeveloper.

5-Explain the entire java life cycle.
Answer:
  Life cycle of a java program tells us what happens right from the point when we type source code in
a text editor to the point that source code is converted into machine code (0’s and 1’s).

        There are three main stages in the life cycle of a java program. They are:
        Editing the program
        Compiling the source code
        Executing the byte code

        First, you will start with typing the program in a text-editor (ex: notepad, notepad++, wordpad, textedit etc).
         After completing editing of the program, we have to save the file.
         While saving the file you should remember that the file must be saved with .
         java extension. For example, let’s think that I had written a Java program which contains
         a single class Sample (more on classes in future posts). It is a good convention to save
         the file with the name of the class. So, as per my example, the file will be saved as Sample.java.

        Second step is compilation. The name of the Java compiler is javac.
        The input to the compiler is Java source code which is available in Sample.java.
        The output of the compiler is machine independent or platform independent code which is known as bytecode.
        The file which is generated after compilation is .class file. As per my example,
        the bytecode file will be Sample.class.

        Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM).
        Input to the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU
        of the local machine.

6-What is a class?
Answer:
 A class is a user defined blueprint or prototype from which objects are created.
It represents the set of properties or methods that are common to all objects of one type.

7-What is an object?
Answer:
 A Java object is a combination of data and procedures working on the available data.
An object has a state and behavior. The state of an object is stored in fields (variables),
while methods (functions) display the object's behavior. Objects are created from templates known as classes

8-What is the entry point of an application?
Answer:
  A Java application is a public Java class with a main() method.
  The main() method is the entry point into the application.

9-Why is the main() static?
Answer:
  Java main() method is always static, so that compiler can call it without the creation of an
  object or before the creation of an object of the class. ... So, the compiler needs to call the main() method.
  If the main() is allowed to be non-static, then while calling the main() method JVM has to instantiate its class.

10-Which class is the superclass of all classes?
Answer:
  Object class
  Java. lang. Object class is the root or superclass of the class hierarchy, which is present in java

11-What is difference between path and classpath variables?
Answer:
           PATH	                                                   CLASSPATH
PATH is an environment variable.	             CLASSPATH is also an environment variable.
It is used by the operating system
to find the executable files (.exe).	        It is used by Application ClassLoader to locate the .class file.

12-What is the difference between an Interface and Abstract class?
Answer:
  The key technical differences between an abstract class and an interface are:
  Abstract classes can have constants, members, method stubs
  (methods without a body) and defined methods,
  whereas interfaces can only have constants and methods stubs.

13-Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: NO
  You cannot create an object of abstract class or interface since they are incomplete class
  (interface is not even considered as a class.)
   What you can do is to implement a subclass of abstract class which, of course, must not be abstract.

14-What is Access Modifier?
Answer:
  access modifiers are used to set the accessibility (visibility) of classes,
interfaces, variables, methods, constructors, data members, and the setter methods.
For example, class Animal { public void method1() {...} private void method2() {...} }

15-What is OOP? Define each OOP concept.
Answer:
  Object-oriented programming (OOP) is a computer programming model that organizes software design around data,
   or objects, rather than functions and logic. ...
   OOP focuses on the objects that developers want to manipulate rather than the logic required to manipulate them.
OOP concepts in Java are the main ideas behind Java’s Object Oriented Programming.
They are an abstraction, encapsulation, inheritance, and polymorphism.
    a-Abstraction. Abstraction means using simple things to represent complexity. We all know how to turn the TV on,
but we don’t need to know how it works in order to enjoy it. In Java,abstraction means simple things like objects,
classes, and variables represent more complex underlying code and data.
This is important because it lets avoid repeating the same work multiple times.
    b-Encapsulation. This is the practice of keeping fields within a class private, then providing access to them via
public methods. It’s a protective barrier that keeps the data and code safe within the class itself.
This way, we can re-use objects like code components or variables without allowing open access to the data system-wide.
    c-Inheritance. This is a special feature of Object Oriented Programming in Java. It lets programmers create new classes
that share some of the attributes of existing classes. This lets us build on previous work without reinventing the wheel.
   d-Polymorphism. This Java OOP concept lets programmers use the same word to mean different things in different contexts.
One form of polymorphism in Java is method overloading. That’s when different meanings are implied by the code itself.
The other form is method overriding. That’s when the different meanings are implied by the values of the supplied
 variables. See more on this below.


16-What is Java Package and which package is imported by default?
Answer:
      A Java package organizes Java classes into namespaces, providing a unique namespace for each type it contains.
      Classes in the same package can access each other's package-private and protected members.
  java.lang package
  For convenience, the Java compiler automatically imports two entire packages for each source file: (1) the java.
  lang package and (2) the current package (the package for the current file).

17-What is an API? List some API's that you have used so far.
Answer:
    An API can be described as a way to enable computers to possess a common interface, to allow them to
 communicate with each other. Java Application Programming Interface (API) is the area of Java development kit (JDK).
 An API includes classes, interfaces, packages and also their methods, fields, and constructors.

18-Does java support multiple inheritance? Why or why not?
Answer:
  When one class extends more than one classes then this is called multiple inheritance. For example: Class C extends
class A and B then this type of inheritance is known as multiple inheritance. Java doesn't allow multiple inheritance

19-What is method overloading and when does it happen?
Answer:
  Overloading occurs when two or more methods in one class have the same method name but different parameters.
   Must have a different number of parameters. If the number of parameters is the same,
   then it must have different types of parameters. Overloading is known as compile-time polymorphism.

20-Explain exceptions in java and how to handle them.
Answer:
An Exception is an unwanted event that interrupts the normal flow of the program.
  The try-catch is the simplest method of handling exceptions. Put the code you want to run in the try block,
 and any exceptions that the code throws are caught by one or more catch blocks.
 This method will catch any type of exceptions that get thrown. This is the simplest mechanism for handling exceptions.

21-What is static keyword? When and how do we use it?
Answer:
  In Java, static keyword is mainly used for memory management. It can be used with variables, methods,
  blocks and nested classes. It is a keyword which is used to share the same variable or method of a given class.
 Basically, static is used for a constant variable or a method that is same for every instance of a class.

22-What is final keyword? When and how do we use it?
Answer:
  The final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable
 (impossible to inherit or override). The final keyword is useful when you want a variable to always store
 the same value, like PI (3.14159...).
 The final keyword is called a "modifier".

23-Explain the difference between final, finally and finalize?
Answer:
  Final is used to apply restrictions on class, method and variable.
 Final class can't be inherited, final method can't be overridden and final variable value can't be changed.
 Finally is used to place important code, it will be executed whether exception is handled or not.

24-What is a constructor?
Answer:
  The purpose of constructor is to initialize the object of a class while the purpose of a method is to perform a
 task by executing java code. Constructors cannot be abstract, final, static and synchronised while methods can be.
 Constructors do not have return types while methods do.

25-Can we have multiple constructors in a class?
Answer:
  Yes, a Class can have more than Constructor. Multiple instance constructors can be defined for a class
 that are overloaded with different parameter signatures. If an instance constructor is defined without parameters,
 that constructor becomes the default instance constructor for the class

26-If we don't have a constructor declared, what is called during the object creation?
Answer:
  All classes have at least one constructor. If a class does not explicitly declare any,
the Java compiler automatically provides a no-argument constructor, called the default constructor.
If the parent has no constructor ( Object does have one), the compiler will reject the program.

27-What is "this" keyword in Java? When would we use it?
Answer:
  The this keyword refers to the current object in a method or constructor.
The most common use of the this keyword is to eliminate the confusion between class attributes and
parameters with the same name (because a class attribute is shadowed by a method or constructor parameter).

28-What is "super" keyword in Java? What are some scenarios we would use it?
Answer:
  We can use super keyword to access the data member or field of parent class.
It is used if parent class and child class have same fields. In the above example, Animal and Dog both classes
have a common property color. If we print color property, it will print the color of current class by default.

29-What does JVM stand for?
Answer:
  Java Virtual Machine (JVM) is a engine that provides runtime environment to drive the Java Code or applications.
It converts Java bytecode into machines language. JVM is a part of Java Run Environment (JRE).

30-Is JVM platform independent?
Answer:
  JVM is platform dependent because it takes java byte code and generates byte code for the current operating system.
So Java software is platform dependent but Java language is platform independent
because different operating system have different JVMs.

31-What version of Java are you using?
Answer:
IntelliJ IDEA 2020.3.2 (Community Edition)
Build #IC-203.7148.57, built on January 25, 2021
Runtime version: 11.0.9.1+11-b1145.77 x86_64
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.
macOS 10.16
GC: ParNew, ConcurrentMarkSweep
Memory: 1979M
Cores: 12
Non-Bundled Plugins: mobi.hsz.idea.gitignore, com.jetbrains.codeWithMe

32-What does JAR stand for?
Answer:
  JAR stands for Java ARchive. It's a file format based on the popular ZIP file format and is used for
aggregating many files into one. Although JAR can be used as a general archiving tool,
the primary motivation for its development was so that Java applets and their requisite components

33-What is the difference between JDK and JVM?
Answer:
  JVM is the Java Virtual Machine – it actually runs Java ByteCode.
JDK is the Java Development Kit – it is the JRE, but with javac (which is what you need to compile Java source code)
and other programming tools added.

34-What is the difference between JVM and JRE?
Answer:
  JRE is the container, JVM is the content. Java Runtime Environment contains JVM, class libraries,
and other supporting files. It does not contain any development tools such as compiler, debugger, etc.
 *JRE = JVM + Java Packages Classes (like util, math, lang, awt, swing etc) + runtime libraries

35-Explain the difference between compile-time and run-time?
Answer:
  Compile-time and Runtime are the two programming terms used in the software development.
Compile-time is the time at which the source code is converted into an executable code
while the run time is the time at which the executable code is started running.

36-What is heap?
Answer:
  The Java heap is the area of memory used to store objects instantiated by applications
running on the JVM. Objects in the heap can be shared between threads.

37-How does Java manage its memory?
Answer:
  In Java, memory management is the process of allocation and de-allocation of objects, called Memory management.
Java does memory management automatically. Java uses an automatic memory management system called a garbage collector.
 Thus, we are not required to implement memory management logic in our application.

38-What is the difference between String, StringBuffer and StringBuilder?
Answer:
	    StringBuffer	                                                 StringBuilder
1)	StringBuffer is synchronized i.e.                       StringBuilder is non-synchronized i.e. not thread safe.
thread safe.                                                 It means two threads can call the methods of
 It means two threads can't call the methods                 StringBuilder simultaneously.
 of StringBuffer simultaneously.

2)	StringBuffer is less efficient than                     StringBuilder is more efficient than StringBuffer.
StringBuilder.


39-What is Singleton class?
Answer:
  The singleton design pattern is used to restrict the instantiation of a class and ensures that only one instance
of the class exists in the JVM. In other words,
a singleton class is a class that can have only one object (an instance of the class) at a time per JVM instance.

40-What is Serialization and Deserialization?
Answer:
  Serialization is a mechanism of converting the state of an object into a byte stream.
Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.
This mechanism is used to persist the object. The byte stream created is platform independent.

41-Explain the difference between While and Do..While loops?
Answer:
  The while loop in java executes one or more statements after testing the loop continuation
condition at the start of each iteration.
The do-while loop, however, tests the loop continuation condition after the first iteration has completed.

42-What is Enum?
Answer:
  An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).
To create an enum , use the enum keyword (instead of class or interface), and separate the constants with a comma.

43-What is Iterator?
Answer:
  An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.
It is called an "iterator because "iterating" is the technical term for looping.
To use an Iterator, you must import it from the java

44-Which one will take more memory: an int or Integer? Why?
Answer:
integer takes more memory than int
  int is a primitive data type which takes 32 bits(4 bytes) to store. When your Java code uses the new
operator to create an instance of a Java object, much more data is allocated than you might expect.
Integer is an object which takes 128 bits (16 bytes) to store int value.

45-Why are Strings considered to be immutable in Java?
Answer:
  The string is Immutable in Java because String objects are cached in the String pool.
Mutable String would produce two different hashcodes at the time of insertion and
retrieval if contents of String was modified after insertion, potentially losing the value object in the map.

46-What is constructor chaining in Java?
Answer:
  The process of invoking a sequence of constructors upon initialization of a class object is called constructor chaining.
Constructor chaining is useful when you want to invoke multiple constructors,
one after another, by initializing only one instance.

47-The difference between Serial and Parallel Garbage Collector?
Answer:
  a serial collector is a default copying collector which uses only one GC thread for the GC operation,
while a parallel collector uses multiple GC threads for the GC operation.

48-What does JIT stands for?
Answer:
  The Just-In-Time (JIT) compiler is a component of the runtime environment
that improves the performance of Java™ applications by compiling bytecodes to native machine code at run time.

49-Explain the process of Java garbage collection?
Answer:
  All objects are allocated on the heap area managed by the JVM.As long as an object is being referenced,
the JVM considers it alive. Once an object is no longer referenced and therefore is not reachable by
the application code, the garbage collector removes it and reclaims the unused memory.

50-Can you guarantee the garbage collection process?
Answer:
  No, Garbage collection does not guarantee that a program will not run out of memory.
The purpose of garbage collection (GC) is to identify and discard objects that are no longer needed by a Java program,
so that their resources can be reclaimed and reused.

51-What is the difference between stack and heap in Java?
Answer:
  Java Heap Space is used throughout the application, but Stack is only used for the
method — or methods — currently running. The Heap Space contains all objects are created, but Stack contains
any reference to those objects. Objects stored in the Heap can be accessed throughout the application.

52-What is reflection in Java and why is it useful?
Answer:
  Reflection is a feature in the Java programming language. It allows an executing
Java program to examine or "introspect" upon itself, and manipulate internal properties of the program.
For example, it's possible for a Java class to obtain the names of all its members and display them.

53-What is multithreading in Java?
Answer:
  MULTITHREADING in Java is a process of executing two or more threads simultaneously to maximum utilization of CPU.
Multithreaded applications execute two or more threads run concurrently.
Hence, it is also known as Concurrency in Java. Each thread runs parallel to each other.

54-What is synchronization in Java?
Answer:
  A synchronized block in Java is synchronized on some object. All synchronized blocks
synchronized on the same object can only have one thread executing inside them at a time. All other threads
attempting to enter the synchronized block are blocked until the thread inside the synchronized block exits the block

55-What is a Framework?
Answer:
  Java™ frameworks are bodies of prewritten code used by developers to create apps using the Java programming language.
Java frameworks may include predefined classes (such as categories of objects)
and functions that can be used to process, input, and manage hardware devices, as well as interact with system software.

56-What are the testing Frameworks available in Java?
Answer:
Name	                                       Details
JRockit	                       Java profiling tool for performance Tuning
JSF	                           Java specification for building component-based user interfaces for web applications.
JSoup	                       Java HTML parser library. Supports extracting and manipulating data using
                               DOM, CSS, and JQuery methods.
JUnit	                        Unit testing framework

57-What are jUnit and testNG?
Answer:
  JUnit is an open-source framework used to trigger and write tests.
TestNG is a Java-based framework that is an upgraded option for running tests. Parallel test Runs.
JUnit does not support to run parallel tests. TestNG can run parallel tests.

58-What are the dependencies for this project?
Answer:
gson-2.6.2.jar
jackson-annotations-2.11.3.jar
jackson-core-2.11.3.jar
jackson-databind-2.11.3.jar
mongo-java-driver-3.4.0.jar
mysql-connector-java-5.1.41-bin.jar
mysql-connector-java-6.0.6-bin.jar
testng-6.8.7.jar
java-json.jar
javax.json-1.0.jar

59-What is dependency injection in Java?
Answer:
  Dependency injection (DI) is the concept in which objects get other required objects from outside.
DI can be implemented in any programming language. The general concept behind dependency
injection is called Inversion of Control.
A Java class has a dependency on another class, if it uses an instance of this class.

60-Explain what static binding and dynamic binding is?
Answer:
  In Java static binding refers to the execution of a program where type of object is determined/known at
compile time i.e when compiler executes the code it know the type of object or class to which object belongs.
While in case of dynamic binding the type of object is determined at runtime.